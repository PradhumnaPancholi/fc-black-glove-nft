const { MerkleTree } = require("merkletreejs");
const keccak256 = require("keccak256");

export function createWhitelist() {
  //function ro process addresses for leaf nodes //
  const padBuffer = (addr: any) => {
    return Buffer.from(addr.substr(2).padStart(32*2, 0), 'hex')
  }
  console.log("This is Merkletree for whitelist")

  let whitelistAddresses = [
  "0x45500800dc3235e1c4aeaedacebb9bf1c223803d",
  "0x2ae0213b4e387f5573e9e89bfc9112afed87e681",
  "0x5cac4a6ff0c0c90053f0204e8caf1b707bc307e6",
  "0x6cc0d7791db228b66c190462ea19fca92aa1f25f",
  "0x515335b2b1391e9b33753577f15f27e9baefa8b5",
  "0xc8090295229545e1377adc0e15c9e48b9e449f76",
  "0xe65ee900a08fa2290d991609c6a35f2a52c4b8c7",
  "0x074051a0f3bd144df4e8e71ec5b75c9c8fdd95cb",
  "0x302882ea764225633c74838d702bb591774955a3",
  "0xe516e67cf0469ad8980f369c44c593f7cc1dbcea",
  "0x27629b5d175e899a19ed6b3a96016377d5ee4768",
  "0x872f1ffdeee35a6074658b4fb185e2582db7896a",
  "0x36c59fd7b96e19d159b372be897a9951f8e24d6c",
  "0xea4cf9c25e042b81af20b329505c5ae5b16a3f60",
  "0xb9e291b68e584be657477289389b3a6deed3e34c",
  "0x6487d336bdec94d4714a4d217b15aa5c7b9dfa99",
  "0xed24226381f5144562f0f50c69b7abbaf5a2f093",
  "0x68e41bdd608fc5ee054615cf2d9d079f9e99c483",
  "0x78fd06a971d8bd1ccf3ba2e16cd2d5ea451933e2",
  "0x18a428ce0c31584a21cf8cefdb8849d8013e1994",
  "0x95dca06210d92e8265bdaba82926f704f710b9d3",
  "0x75fe3943a6c8866e1c41e1f35c74a9fb7a77b835",
  "0x43403c78f4f00c51126e20be812aa74cbb3b876a",
  "0xf6b80487996c7d47a8407236689383cab5258765",
  "0x9745331c63b6fb5e1e348dfd54bfde5afcde0c24",
  "0x65b2689f54618359ecf7455d14fafbfcc180a47a",
  "0xe08753f2caf86cfa29ce24b1ca765f6f3a25a68d",
  "0x7d6fbc9a46cc83d74fc6712f83e2e1b49ed934fb",
  "0x1d16d60b56443a15df4a12fe25e6e7f2bbb23c6a",
  "0x4a9a3815060c3bd08fb4d44c9e74513874771b0c",
  "0xf225b5d5b96d5ac7fe2946dd90038ddb74da66b0",
  "0x9c4d592042f959254485d443bbc337d29572264f",
  "0x64a65c2b60514be7024a8ba8c44f8fe9ba7bc991",
  "0x0679953a1d952e9856a318cd91a5c05a3dd547e8",
  "0x37c7ccbcec11b355ec8e4f84bd7a0e30785ca7d4",
  "0x1e740320a151030b5c530a0ea371438ad152b317",
  "0x14630633680fa6ea5ba8a69ef182072d335c3c7e",
  "0x49236ce2eb4b67618513b37f09c101183e7367f6",
  "0x3aa8ac0e6c1fb9cbb733565de16cdc5a676bcb04",
  "0x5656cb4721c21e1f5dcbe03db9026ac0203d6e4f",
  "0x0040daac32d83c78546ae36da42a496b28ab09e1",
  "0x13df8ddb5548a58edc9531c91eae26eae2e3d351",
  "0x738027f2d60d05b3b136893fd9c97a75f737bb8e",
  "0x74597a233e403ac2f48c40dd66fde8d22d6634f2",
  "0x3cc04875e98edf01065a4b27e00bcfeddb76cba8",
  "0xba890e4f945cabb685310f901e9bd37c18721650",
  "0x0c4eecbe38445697b97ff5c7a65c150d59b0e894",
  "0xf5073937079dc9a0011be36dbe50d721e08a8345",
  "0x9a45c63ef50d0cc8ccdaffc54ea5ac8007313a6f",
  "0x2a06913d5b8748b222e1236768c24ca19198b374",
  "0xf881d0e8f2da19240575b2e46e6850e7d789059b",
  "0xc082bdb52b9f341d8ab5d8ae9da708d13c230cca",
  "0xa1bfe026772afe1dfb03e8b601d444c868dde040",
  "0x7badda0deedcecd5e27e0991824ea5961485f31d",
  "0x4d4b5ace61414494dbcc4d2c3484d2bf92658a01",
  "0x9fd04250b1a1e25bfcf47532103c35a15389fc05",
  "0x830f21710eaf94a1c14484e48d9b34206c263dd7",
  "0xb4103329230db58ea6e2480e4022b577833600df",
  "0xb548f95c71916f930c42fe4199cae8c38a8f5f62",
  "0x3d8377df40104140b8e0a60c3ed1171084d80de0",
  "0x3e3ebbdd2c4ab62b453043331122d815bb604f05",
  "0x49b120d47fcb24e46605aaaf6e52a4a06e7700d9",
  "0x2e6d9adba8164dd78190ed387ee17dea4322e447",
  "0x7c597d2d92414e6bc9d4bdb6c1dd5bc54875c01b",
  "0xba2dc20329b21370b91e1306b1c0b4c0ff9adbd5",
  "0x3185ef019ba1c04b8d65edb64c1c34c3eae52271",
  "0x477ea3f48c3d296eb6ecd42c2f69cdf28eb622bf",
  "0x4b68969b3a8f58f51e549707df4a880b02892f24",
  "0x8bf09fb26c444302961c6fea27eeb44db4c62997",
  "0x3bea0d3d4f2d0927d18ab010339b0d681c1e8cec",
  "0x662141b11279de25555e50bfd8ef5bf543c55ac2",
  "0x0f80b86adbf151303dab02ba416f3fb30c66a21e",
  "0x99930b70a0eab2b7619016a1455c8d01ca057b98",
  "0x2d7e89d57ff11d2efcb10882b0dc1c5802f18553",
  "0xf6f7c64ee5dd7280b1519f81968375c1442ba036",
  "0x0B4c5302b6727c496fAA5ea3DC2aF2560B269cC4",
  "0xcf88FA6eE6D111b04bE9b06ef6fAD6bD6691B88c",
  "0x592c6C12c6cF71722880b9263e93B35FF7952CC2",
  "0x889C97c24be9bBD5Fab464ba89D47f621Fbe019c",
  "0xAfeF17E03503b8CBb14D189044E2Eb7E82FfC651",
  "0xC01A0311708476E586fc194eB433979FF904E6Dd",
  "0xFe3A899E0de9791f5568C2FA614D909d80E81966",
  "0x776180283E149218d6655dB2137C6e4E96eFd7ce",
  "0x6bEE4079849E1993bFDaB33Ee5392AD821798618",
  "0xa49A866b569dDb74C1aD6a539Ea8FA3c647dE65f",
  "0x440E00dDdc3372d215B66BDB326D1fEa1Dc4F0fa",
  "0x61D8Bf0c1EBDE1be56bC145Ff5E9018fEeD32835",
  "0x6A1bCA5fC75241302022D3a9E15c586aCC96032D",
  "0x044CD5f498ddbf0ea854aB4Bc96110756b26de97",
  "0x1945F26B02aa1Df0d9c761d240A853cE1fFaE21A",
  "0xedD902401FC8Cffccb57bB71cfc7C551d5e1c108",
  "0x46f5e620c326ee0275dbdfbdb98320dc0e816c1d",
]
  const leaves = whitelistAddresses.map(addr => padBuffer(addr))
  const merkletree = new MerkleTree(leaves, keccak256, {sortPairs: true})
  console.log("merkletree", merkletree.toString())
  const rootHash = merkletree.getHexRoot()
  console.log("root hash", rootHash)
  return rootHash
  
}
